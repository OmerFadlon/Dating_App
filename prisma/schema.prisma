// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  name              String
  hash              String       
  description       String?
  age               Int
  minAgePreference  Int
  maxAgePreference  Int
  gender            Gender
  genderPreference  GenderPreference
  city              String
  createdAt         DateTime  @default(now())
  photo             String?   

  likedByUsers    Like[]    @relation("LikesReceived")  // Likes the user has received
  sentMessages    Message[] @relation("SenderMessages") // Messages sent by the user
  matchesAsA      Match[]   @relation("UserAMatches")   // Matches where user is User A
  matchesAsB      Match[]   @relation("UserBMatches")   // Matches where user is User B
  
  // Reverse relation for likes given
  givenLikes      Like[]    @relation("LikesGiven") // Likes given by the user

  // Indexes for filtering by prefrences:
  @@index([age])  
  @@index([city]) 
  @@index([gender]) 
  @@index([genderPreference]) 
  @@index([minAgePreference]) 
  @@index([maxAgePreference]) 
}


model Like {
  id            Int            @id @default(autoincrement())
  userId        Int
  likedUserId   Int
  direction     LikeDirection
  createdAt     DateTime       @default(now())

  user          User   @relation("LikesGiven", fields: [userId], references: [id])
  likedUser     User   @relation("LikesReceived", fields: [likedUserId], references: [id])

  @@unique([userId, likedUserId]) // Ensure a like record is unique between two users

  @@index([userId])          
  @@index([likedUserId])    
  @@index([userId, likedUserId, direction]) 
}


model Match {
  userAId       Int
  userBId      Int
  createdAt   DateTime @default(now())

  userAObj    User     @relation("UserAMatches", fields: [userAId], references: [id])
  userBObj    User     @relation("UserBMatches", fields: [userBId], references: [id])

  // One to many relation - many saved messages for each match
  messages    Message[] 
  

  @@id([userAId, userBId])

  // Indexes for efficient lookups
  @@index([userAId])
  @@index([userBId])
}


model Message {
  id        Int      @id @default(autoincrement())
  userAId   Int
  userBId   Int
  senderId  Int
  message   String
  createdAt DateTime @default(now())

  match     Match    @relation(fields: [userAId, userBId], references: [userAId, userBId])
  sender    User     @relation("SenderMessages", fields: [senderId], references: [id])

  @@index([userAId, userBId])
  
}

enum LikeDirection {
  like
  dislike
}

enum Gender {
  male
  female
  other
}

enum GenderPreference{
  men
  women
  both
}